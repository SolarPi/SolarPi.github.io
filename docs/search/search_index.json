{
    "docs": [
        {
            "location": "/index.html",
            "text": "Solar Pi Docs\n\n\n\n\nWelcome to the home of Solar Pi documentation. Here you'll find (almost) everything you need to know about your Solar Pi.\n\n\nNavigation\n\n\n\n\nIf you click on the icon with 3 white bars in the top left corner, you can browse through the docs.\n\n\nIn the top right, you can search for key words to quickly find information.\n\n\nLinks are in \ngreen\n; click or tap on the \ngreen text\n to visit the page.\n\n\n\n\nUseful Places\n\n\nHere are some places that we recommend you take a look at:\n\n\nGetting Started\n\n\nThis will show you the basics on how to use your Solar Pi.\n\n\nSolar Pi Apps\n\n\nThis will show you how to use the apps, and what they do.\n\n\nRaspberry Pi Docs\n\n\nThis explains how to use the Raspbian operating system that is installed on your Solar Pi.",
            "title": "Home"
        },
        {
            "location": "/index.html#solar-pi-docs",
            "text": "Welcome to the home of Solar Pi documentation. Here you'll find (almost) everything you need to know about your Solar Pi.",
            "title": "Solar Pi Docs"
        },
        {
            "location": "/index.html#navigation",
            "text": "If you click on the icon with 3 white bars in the top left corner, you can browse through the docs.  In the top right, you can search for key words to quickly find information.  Links are in  green ; click or tap on the  green text  to visit the page.",
            "title": "Navigation"
        },
        {
            "location": "/index.html#useful-places",
            "text": "Here are some places that we recommend you take a look at:",
            "title": "Useful Places"
        },
        {
            "location": "/index.html#getting-started",
            "text": "This will show you the basics on how to use your Solar Pi.",
            "title": "Getting Started"
        },
        {
            "location": "/index.html#solar-pi-apps",
            "text": "This will show you how to use the apps, and what they do.",
            "title": "Solar Pi Apps"
        },
        {
            "location": "/index.html#raspberry-pi-docs",
            "text": "This explains how to use the Raspbian operating system that is installed on your Solar Pi.",
            "title": "Raspberry Pi Docs"
        },
        {
            "location": "/getting-started/index.html",
            "text": "Getting Started\n\n\nYour Solar Pi is a Raspberry Pi based computer. It is capable of performing many tasks a lot faster than a human and it can do almost anything you want, if you know how to program it. We aim to teach you how to use a computer and how to code, as it'll give you many more skills.\n\n\nGood luck, and we hope that you enjoy using your Solar Pi!\n\n\nInput\n\n\nTouchscreen\n\n\nYour Solar Pi has a touchscreen. This means that you can use your finger to touch the screen and control the computer. You can press buttons, access menus and look through this documentation. Also, you can use the on screen keyboard by clicking on the icon in the toolbar at the top of the screen.\n\n\n\n\nKeyboard & Trackpad\n\n\nYou can also use a keyboard and trackpad. This makes it easier to use your Solar Pi when typing a lot or doing tasks that can't be done with the touchscreen.\n\n\nTo use it, press the buttons on the keyboard to get the letters and numbers you want, and drag your finger around the trackpad to move the cursor (the black pointer). To click, tap on the trackpad, or press down on the bottom left area. You can also right click, by pressing down on the bottom right of the touchpad. This will bring up an additional menu.\n\n\nYou will need to regularly charge your keyboard, and this can be done my plugging it into one of your Solar Pi's USB ports.\n\n\nRaspbian\n\n\nRaspbian is the operating system install on your Solar Pi. Without it, the Solar Pi wouldn't be able to do very much.\n\n\nThe Raspbian Desktop\n\n\n\n\nThis is the Desktop - it is what you see when you first use the computer. It has a picture as a background, and a bar at the top. There may be also be icons located on the background image.\nThere are icons that sit on the desktop. You can make shortcuts to different programs, or you can save files here.\n\n\nThe button at the top left has the Raspberry Pi logo on it. This is the Applications Menu. From here, you can launch different apps and use them.\nThe bar at the top has some shortcuts to some commonly used programs such as Chromium, the file browser and the Terminal. Apps that are already open will appear next to them in a rectangular box.\n\n\nFile Manager\n\n\n\n\nThe default file manager for Raspbian is PCmanFM. This has the icon that looks like an open yellow folder. With this, you can browse the files on the system.\n\n\nRaspbian uses a filesystem to store all of the data in the computer. You can think of the filesystem as an upside-down tree. The 'root' of the tree is a single point, so in the filesystem, the root is \n/\n. The file path of the next folder could be \n/folder1\n, and the one after could be \n/folder1/folder2\n.\nAll the files will branch out, each with its own unique path. For example, your Documents folder has this file path: \n/home/pi/Documents\n. This tells you exactly where the file folder is, and is very useful. You can read more about the filesystem \nhere\n.\n\n\nThe Terminal\n\n\n\n\nThe Terminal, (also known as the Command Line) is a very powerful and useful tool. You enter commands to do certain tasks, and it will do them for you. As a beginner, you don't have to use this - but as get more experience in using a computer, then you might want to give it a go. You can access it by clicking on the icon which has a black box with '>_' inside.\nYou can see a list of Terminal commands \nhere\n and you can learn more about the Terminal \nhere\n.",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/index.html#getting-started",
            "text": "Your Solar Pi is a Raspberry Pi based computer. It is capable of performing many tasks a lot faster than a human and it can do almost anything you want, if you know how to program it. We aim to teach you how to use a computer and how to code, as it'll give you many more skills.  Good luck, and we hope that you enjoy using your Solar Pi!",
            "title": "Getting Started"
        },
        {
            "location": "/getting-started/index.html#input",
            "text": "",
            "title": "Input"
        },
        {
            "location": "/getting-started/index.html#touchscreen",
            "text": "Your Solar Pi has a touchscreen. This means that you can use your finger to touch the screen and control the computer. You can press buttons, access menus and look through this documentation. Also, you can use the on screen keyboard by clicking on the icon in the toolbar at the top of the screen.",
            "title": "Touchscreen"
        },
        {
            "location": "/getting-started/index.html#keyboard-trackpad",
            "text": "You can also use a keyboard and trackpad. This makes it easier to use your Solar Pi when typing a lot or doing tasks that can't be done with the touchscreen.  To use it, press the buttons on the keyboard to get the letters and numbers you want, and drag your finger around the trackpad to move the cursor (the black pointer). To click, tap on the trackpad, or press down on the bottom left area. You can also right click, by pressing down on the bottom right of the touchpad. This will bring up an additional menu.  You will need to regularly charge your keyboard, and this can be done my plugging it into one of your Solar Pi's USB ports.",
            "title": "Keyboard &amp; Trackpad"
        },
        {
            "location": "/getting-started/index.html#raspbian",
            "text": "Raspbian is the operating system install on your Solar Pi. Without it, the Solar Pi wouldn't be able to do very much.",
            "title": "Raspbian"
        },
        {
            "location": "/getting-started/index.html#the-raspbian-desktop",
            "text": "This is the Desktop - it is what you see when you first use the computer. It has a picture as a background, and a bar at the top. There may be also be icons located on the background image.\nThere are icons that sit on the desktop. You can make shortcuts to different programs, or you can save files here.  The button at the top left has the Raspberry Pi logo on it. This is the Applications Menu. From here, you can launch different apps and use them.\nThe bar at the top has some shortcuts to some commonly used programs such as Chromium, the file browser and the Terminal. Apps that are already open will appear next to them in a rectangular box.",
            "title": "The Raspbian Desktop"
        },
        {
            "location": "/getting-started/index.html#file-manager",
            "text": "The default file manager for Raspbian is PCmanFM. This has the icon that looks like an open yellow folder. With this, you can browse the files on the system.  Raspbian uses a filesystem to store all of the data in the computer. You can think of the filesystem as an upside-down tree. The 'root' of the tree is a single point, so in the filesystem, the root is  / . The file path of the next folder could be  /folder1 , and the one after could be  /folder1/folder2 .\nAll the files will branch out, each with its own unique path. For example, your Documents folder has this file path:  /home/pi/Documents . This tells you exactly where the file folder is, and is very useful. You can read more about the filesystem  here .",
            "title": "File Manager"
        },
        {
            "location": "/getting-started/index.html#the-terminal",
            "text": "The Terminal, (also known as the Command Line) is a very powerful and useful tool. You enter commands to do certain tasks, and it will do them for you. As a beginner, you don't have to use this - but as get more experience in using a computer, then you might want to give it a go. You can access it by clicking on the icon which has a black box with '>_' inside.\nYou can see a list of Terminal commands  here  and you can learn more about the Terminal  here .",
            "title": "The Terminal"
        },
        {
            "location": "/solar-pi-apps/index.html",
            "text": "Solar Pi Apps, Guides & Tutorials\n\n\n\n\nInfo\n\n\nAll of the Solar Pi apps were created with \nappJar\n, a simple tkinter GUI wrapper for Python.\n\n\n\n\nYour Solar Pi comes with a few custom apps that we have written to help you use your Solar Pi, along with some offline guides and tutorials that you can access. Here, we'll explain what each one is for, and how to use them.\n\n\n\n\nWarning\n\n\nSolar Pi apps can be found at \n/usr/local/bin/Solar Pi\n. Please do NOT modify or save anything here, as important things might get broken and any files saved here could be deleted during an update. If you want to have a play, copy the folder, and play with that :)\n\n\n\n\nSolar Pi Welcome\n\n\nThis is the main Solar Pi app that you see when you first log on to your Solar Pi. The toolbar at the top gives you options to shutdown, reboot of log out of your Pi. Also, you can change settings, open the file manager, see what the Solar Pi project is about and read these docs.\n\n\nWelcome!\n\n\n\n\nThis tab introduces you to your Solar Pi. There are links to various, useful apps here, such as the \nlanguages\n app to allow you to change the display language of your Solar Pi.\n\n\nStarter Guide\n\n\nIn this tab, it explains the basics of using your Solar Pi. It also provides a link to this page in the docs.\n\n\nClick on the button to read about that topic.\n\n\nApplications\n\n\nThe applications tab shows you apps that you might find useful. Click on a line in the box on the left to select it, then to launch it, click on the button.\n\n\nGuides & Tutorials\n\n\nHere, you'll find the guides and tutorials for programming. Like the Applications tab, click on a line in the box on the left and to launch it, click on the button.\n\n\nSystem Info\n\n\nIn this tab, it displays the system information of your Solar Pi. It will give you information about your Solar Pi's hardware, software and disk usage.\n\n\nStart Coding\n\n\nThis app helps you decide where to start coding. It explains the 3 main programming languages supported on the Solar Pi: Scratch, \nPython\n and Java.\n\n\n\n\nTo do this, select a language, and click \nMore Info\n. A popup box should then appear giving you a brief overview of the language. Once you have decided, click \nGo\n, and the relevant IDE should launch.\n\n\nSolar Pi Settings\n\n\nThe Solar Pi Settings app allows you to change settings for your Solar Pi. These are settings that can't be changed from the default Raspbian installation, and are specific to the Solar Pi. When you have finished changing the settings, ensure that you click \nApply\n and reboot.\n\n\nIf you want to revert to default settings, click \nRestore Defaults\n and reboot if asked.\n\n\nPerformance & Power\n\n\n\n\nThese settings are related to the performance and power of your Solar Pi. The slider at the top of this section allows you to change the clock speed of your Solar Pi's CPU (\nC\nentral \nP\nrocessing \nU\nnit - effectively the 'brain' of your Solar Pi.). The default is \n1200MHz\n (Megahertz), which will give you maximum performance, but you can lower it to \n600MHz\n if you would like to extend the battery life of your Solar Pi. There is also a text box where you can type the clock speed in, if this is easier for you.\n\n\nThe checkbox that's labelled \nShow battery meter\n controls whether you see the battery meter that is on the bottom left of your screen. If this gets in the way, you can remove it.\n\n\nThere is another checkbox that's labelled \nShow charging animation\n - uncheck it if you want to see the actual battery level while charging.\n\n\nOther Settings\n\n\n\n\nThe checkbox that's labelled \nLaunch the Solar Pi welcome application at startup\n controls if you see the Solar Pi Welcome app when you log in. This is on by default, but once you get used to using your Solar Pi, you can turn it off.\n\n\nThere's another checkbox that's labelled \nShow Cowsay at terminal launch\n - uncheck this if you don't want to see the rainbow cow/penguin when you open the terminal.\n\n\nThe next option is labelled \nTheme for Solar Pi apps:\n. This controls how Solar Pi apps look. The default is \n'Solar Pi'\n, but you can always change it by clicking on the box, and selecting a theme from the drop down menu.\n\n\nFinally, at the bottom of the section, there are buttons which say \nChange Advanced Settings\n and \nLanguages\n. The \nChange Advanced Settings\n takes you to the Raspberry Pi Configuration app, and will allow you to tweak things further. The \nLanguages\n button takes you to the \nLanguages app\n, and will allow you to change the display language of your Solar Pi.\n\n\n\n\nWarning\n\n\nOnly go into the Advanced Settings if you know what you are doing!\n\n\n\n\nUpdates\n\n\n\n\nYou can update your Solar Pi from here. Insert the Solar Pi update USB stick, and press \nUpdate\n. To update your Solar Pi, you will need at least 30% battery. Please don't shut the Solar Pi down during this process, and be patient - the process may take a while.\n\n\nLanguages\n\n\n\n\nThis allows you to change the display language of your Solar Pi. If the language that is currently used is not suitable, you can change it by clicking on the button for your language. After that, you'll need to reboot your Solar Pi.\n\n\nBattery Meter\n\n\n\n\nAt the bottom left corner of the display, you will find a battery meter. This displays how much charge you have left in the batteries. You can change the settings for this by going to \nSolar Pi Settings > Performance & Power\n\n\nSolar Pi Docs\n\n\nNot really an app, but still important. This is all the documentation for your Solar Pi. It opens in the Chromium web browser, to allow for easy navigation with a touchscreen. You can navigate different pages via clicking on the icon in the top left, and you can skip through different sections of a page through the menu on the right. You can search through the docs using the search bar in the top right. Links are highlighted in \ngreen\n, and these will take you to different places in the docs.\n\n\nA Byte of Python\n\n\nThis isn't created by us! It's created by \nSwaroop C H\n, and you can view the original \nhere\n. This is to demonstrate that the Solar Pi can display E-Books, so that users can learn about computing and programming.\n\n\nThis is a fantastic Python guide that teaches beginners how to start programming in Python. This opens in the Chromium browser, so that it is easy for you to use when using the touchscreen.\n\n\nJava Guide\n\n\nAgain, this wasn't created by us! It's created by \nTutorials Point\n and you can view the original \nhere\n. This is to demonstrate how the Solar Pi can display offline webpages that allow users to still learn about computing and programming even though they might not be connected to the internet.\n\n\nThis offline website will teach you how to program in Java; a language that is available on the Solar Pi. Designed for beginners, you should be coding in no time! This also opens in the Chromium browser.\n\n\nMoodle\n\n\nAn e-learning platform that allows you to learn about various topics. Log in with the following credentials:\n\n\n\n\n\n\nUsername:\n \nsolarpi\n\n\n\n\n\n\nPassword:\n \nsolarpi",
            "title": "Solar Pi Apps"
        },
        {
            "location": "/solar-pi-apps/index.html#solar-pi-apps-guides-tutorials",
            "text": "Info  All of the Solar Pi apps were created with  appJar , a simple tkinter GUI wrapper for Python.   Your Solar Pi comes with a few custom apps that we have written to help you use your Solar Pi, along with some offline guides and tutorials that you can access. Here, we'll explain what each one is for, and how to use them.   Warning  Solar Pi apps can be found at  /usr/local/bin/Solar Pi . Please do NOT modify or save anything here, as important things might get broken and any files saved here could be deleted during an update. If you want to have a play, copy the folder, and play with that :)",
            "title": "Solar Pi Apps, Guides &amp; Tutorials"
        },
        {
            "location": "/solar-pi-apps/index.html#solar-pi-welcome",
            "text": "This is the main Solar Pi app that you see when you first log on to your Solar Pi. The toolbar at the top gives you options to shutdown, reboot of log out of your Pi. Also, you can change settings, open the file manager, see what the Solar Pi project is about and read these docs.",
            "title": "Solar Pi Welcome"
        },
        {
            "location": "/solar-pi-apps/index.html#welcome",
            "text": "This tab introduces you to your Solar Pi. There are links to various, useful apps here, such as the  languages  app to allow you to change the display language of your Solar Pi.",
            "title": "Welcome!"
        },
        {
            "location": "/solar-pi-apps/index.html#starter-guide",
            "text": "In this tab, it explains the basics of using your Solar Pi. It also provides a link to this page in the docs.  Click on the button to read about that topic.",
            "title": "Starter Guide"
        },
        {
            "location": "/solar-pi-apps/index.html#applications",
            "text": "The applications tab shows you apps that you might find useful. Click on a line in the box on the left to select it, then to launch it, click on the button.",
            "title": "Applications"
        },
        {
            "location": "/solar-pi-apps/index.html#guides-tutorials",
            "text": "Here, you'll find the guides and tutorials for programming. Like the Applications tab, click on a line in the box on the left and to launch it, click on the button.",
            "title": "Guides &amp; Tutorials"
        },
        {
            "location": "/solar-pi-apps/index.html#system-info",
            "text": "In this tab, it displays the system information of your Solar Pi. It will give you information about your Solar Pi's hardware, software and disk usage.",
            "title": "System Info"
        },
        {
            "location": "/solar-pi-apps/index.html#start-coding",
            "text": "This app helps you decide where to start coding. It explains the 3 main programming languages supported on the Solar Pi: Scratch,  Python  and Java.   To do this, select a language, and click  More Info . A popup box should then appear giving you a brief overview of the language. Once you have decided, click  Go , and the relevant IDE should launch.",
            "title": "Start Coding"
        },
        {
            "location": "/solar-pi-apps/index.html#solar-pi-settings",
            "text": "The Solar Pi Settings app allows you to change settings for your Solar Pi. These are settings that can't be changed from the default Raspbian installation, and are specific to the Solar Pi. When you have finished changing the settings, ensure that you click  Apply  and reboot.  If you want to revert to default settings, click  Restore Defaults  and reboot if asked.",
            "title": "Solar Pi Settings"
        },
        {
            "location": "/solar-pi-apps/index.html#performance-power",
            "text": "These settings are related to the performance and power of your Solar Pi. The slider at the top of this section allows you to change the clock speed of your Solar Pi's CPU ( C entral  P rocessing  U nit - effectively the 'brain' of your Solar Pi.). The default is  1200MHz  (Megahertz), which will give you maximum performance, but you can lower it to  600MHz  if you would like to extend the battery life of your Solar Pi. There is also a text box where you can type the clock speed in, if this is easier for you.  The checkbox that's labelled  Show battery meter  controls whether you see the battery meter that is on the bottom left of your screen. If this gets in the way, you can remove it.  There is another checkbox that's labelled  Show charging animation  - uncheck it if you want to see the actual battery level while charging.",
            "title": "Performance &amp; Power"
        },
        {
            "location": "/solar-pi-apps/index.html#other-settings",
            "text": "The checkbox that's labelled  Launch the Solar Pi welcome application at startup  controls if you see the Solar Pi Welcome app when you log in. This is on by default, but once you get used to using your Solar Pi, you can turn it off.  There's another checkbox that's labelled  Show Cowsay at terminal launch  - uncheck this if you don't want to see the rainbow cow/penguin when you open the terminal.  The next option is labelled  Theme for Solar Pi apps: . This controls how Solar Pi apps look. The default is  'Solar Pi' , but you can always change it by clicking on the box, and selecting a theme from the drop down menu.  Finally, at the bottom of the section, there are buttons which say  Change Advanced Settings  and  Languages . The  Change Advanced Settings  takes you to the Raspberry Pi Configuration app, and will allow you to tweak things further. The  Languages  button takes you to the  Languages app , and will allow you to change the display language of your Solar Pi.   Warning  Only go into the Advanced Settings if you know what you are doing!",
            "title": "Other Settings"
        },
        {
            "location": "/solar-pi-apps/index.html#updates",
            "text": "You can update your Solar Pi from here. Insert the Solar Pi update USB stick, and press  Update . To update your Solar Pi, you will need at least 30% battery. Please don't shut the Solar Pi down during this process, and be patient - the process may take a while.",
            "title": "Updates"
        },
        {
            "location": "/solar-pi-apps/index.html#languages",
            "text": "This allows you to change the display language of your Solar Pi. If the language that is currently used is not suitable, you can change it by clicking on the button for your language. After that, you'll need to reboot your Solar Pi.",
            "title": "Languages"
        },
        {
            "location": "/solar-pi-apps/index.html#battery-meter",
            "text": "At the bottom left corner of the display, you will find a battery meter. This displays how much charge you have left in the batteries. You can change the settings for this by going to  Solar Pi Settings > Performance & Power",
            "title": "Battery Meter"
        },
        {
            "location": "/solar-pi-apps/index.html#solar-pi-docs",
            "text": "Not really an app, but still important. This is all the documentation for your Solar Pi. It opens in the Chromium web browser, to allow for easy navigation with a touchscreen. You can navigate different pages via clicking on the icon in the top left, and you can skip through different sections of a page through the menu on the right. You can search through the docs using the search bar in the top right. Links are highlighted in  green , and these will take you to different places in the docs.",
            "title": "Solar Pi Docs"
        },
        {
            "location": "/solar-pi-apps/index.html#a-byte-of-python",
            "text": "This isn't created by us! It's created by  Swaroop C H , and you can view the original  here . This is to demonstrate that the Solar Pi can display E-Books, so that users can learn about computing and programming.  This is a fantastic Python guide that teaches beginners how to start programming in Python. This opens in the Chromium browser, so that it is easy for you to use when using the touchscreen.",
            "title": "A Byte of Python"
        },
        {
            "location": "/solar-pi-apps/index.html#java-guide",
            "text": "Again, this wasn't created by us! It's created by  Tutorials Point  and you can view the original  here . This is to demonstrate how the Solar Pi can display offline webpages that allow users to still learn about computing and programming even though they might not be connected to the internet.  This offline website will teach you how to program in Java; a language that is available on the Solar Pi. Designed for beginners, you should be coding in no time! This also opens in the Chromium browser.",
            "title": "Java Guide"
        },
        {
            "location": "/solar-pi-apps/index.html#moodle",
            "text": "An e-learning platform that allows you to learn about various topics. Log in with the following credentials:    Username:   solarpi    Password:   solarpi",
            "title": "Moodle"
        },
        {
            "location": "/hardware/index.html",
            "text": "Hardware\n\n\nYour Solar Pi is made up of many different parts; this page is here to tell you about them.\n\n\nRaspberry Pi 3 Model B\n\n\n\n\nThis is the heart of your Solar Pi. This is the 'computer' part of the Solar Pi, as it lets you do just about anything - without it, your Solar Pi would be useless. It's also got the last part of our name ('Pi')!\n\n\n19W Foldable Solar Panels\n\n\n\n\nThis has got the first part of our name ('Solar'), as it is also a important part of the Solar Pi. This provides power to all the components, and allows it to work in remote locations.\n\n\nWaveshare 7 Inch 1024x600 Touchscreen\n\n\n\n\nThis is the Solar Pi's display that also acts as an input device. This allows you to interact with the Raspberry Pi, as it displays items on the screen and acts as a combined mouse and keyboard.\n\n\n4 x 2250mAh (9000mAh total) Canwelum Batteries\n\n\n\n\nThese store power for your Solar Pi, and allow it to run indoors and other areas where there is little or no sunlight.\n\n\nPico UPS HAT\n\n\n\n\nThis is attatched on top of the Raspberry Pi to ensure that the batteries power it correctly, and tell it when the battery level is running low.\n\n\nMini Keyboard + Touchpad\n\n\n\n\nThis is an alternative input device that makes it easier for you to type large chunks of code and navigate Raspbian and other applications with better precision.",
            "title": "Hardware"
        },
        {
            "location": "/hardware/index.html#hardware",
            "text": "Your Solar Pi is made up of many different parts; this page is here to tell you about them.",
            "title": "Hardware"
        },
        {
            "location": "/hardware/index.html#raspberry-pi-3-model-b",
            "text": "This is the heart of your Solar Pi. This is the 'computer' part of the Solar Pi, as it lets you do just about anything - without it, your Solar Pi would be useless. It's also got the last part of our name ('Pi')!",
            "title": "Raspberry Pi 3 Model B"
        },
        {
            "location": "/hardware/index.html#19w-foldable-solar-panels",
            "text": "This has got the first part of our name ('Solar'), as it is also a important part of the Solar Pi. This provides power to all the components, and allows it to work in remote locations.",
            "title": "19W Foldable Solar Panels"
        },
        {
            "location": "/hardware/index.html#waveshare-7-inch-1024x600-touchscreen",
            "text": "This is the Solar Pi's display that also acts as an input device. This allows you to interact with the Raspberry Pi, as it displays items on the screen and acts as a combined mouse and keyboard.",
            "title": "Waveshare 7 Inch 1024x600 Touchscreen"
        },
        {
            "location": "/hardware/index.html#4-x-2250mah-9000mah-total-canwelum-batteries",
            "text": "These store power for your Solar Pi, and allow it to run indoors and other areas where there is little or no sunlight.",
            "title": "4 x 2250mAh (9000mAh total) Canwelum Batteries"
        },
        {
            "location": "/hardware/index.html#pico-ups-hat",
            "text": "This is attatched on top of the Raspberry Pi to ensure that the batteries power it correctly, and tell it when the battery level is running low.",
            "title": "Pico UPS HAT"
        },
        {
            "location": "/hardware/index.html#mini-keyboard-touchpad",
            "text": "This is an alternative input device that makes it easier for you to type large chunks of code and navigate Raspbian and other applications with better precision.",
            "title": "Mini Keyboard + Touchpad"
        },
        {
            "location": "/Advanced-Things/terminal/index.html",
            "text": "Raspbian\n\n\nRaspbian is the operating system installed on your Solar Pi. This page is here to tell you how to use it.\n\n\nTerminal\n\n\n\n\nInfo\n\n\nThis was taken from official \nRaspberry Pi documentation\n.\n\n\n\n\nThe terminal (or 'command-line') on a computer allows a user a great deal of control over their system (or in this case, Pi!). Users of Windows may already have come across \nCommand Prompt\n or \nPowershell\n and Mac OS users may be familiar with \nTerminal\n. All of these tools allow a user to directly manipulate their system through the use of commands. These commands can be chained together and/or combined together into complex scripts (see the \nlinux usage page on scripting\n) that can potentially complete tasks more efficiently than much larger traditional software packages.\n\n\nOpening a Terminal window\n\n\nOn the Raspberry Pi (running Raspbian), the default terminal application is \nLXTerminal\n. This is known as a 'terminal emulator', this means that it emulates the old style video terminals (from before graphical user interfaces were developed) in a graphical environment. The application can be found on the Raspberry Pi desktop and when started will look something like this:\n\n\n\n\nYou should be able to see the following prompt:\n\n\npi@raspberrypi ~ $\n\n\n\n\n\nThis shows your username and the hostname of the Pi. Here the username is \npi\n and the hostname is \nraspberrypi\n.\n\n\nNow, let's try running a command. Type \npwd\n (present working directory) followed by the \nEnter\n key. This should display something like \n/home/pi\n.\n\n\nNavigating and browsing your Pi\n\n\nOne of the key aspects of using a terminal is being able to navigate your file system. Firstly, run the following command: \nls -la\n. You should see something similar to:\n\n\n\n\nThe \nls\n command lists the contents of the directory that you are currently in (your present working directory). The \n-la\n component of the command is what's known as a 'flag'. Flags modify the command that's being run. In this case the \nl\n displays the contents of the directory in a list, showing data such as their sizes and when they were last edited, and the \na\n displays all files, including those beginning with a \n.\n, known as 'dotfiles'. Dotfiles usually act as configuration files for software and as they are written in text, they can be modified by simply editing them.\n\n\nIn order to navigate to other directories the change directory command, \ncd\n, can be used. You can specify the directory that you want to go to by either the 'absolute' or the 'relative' path. So if you wanted to navigate to the \npython_games\n directory, you could either do \ncd /home/pi/python_games\n or just \ncd python_games\n (if you are currently in \n/home/pi\n). There are some special cases that may be useful: \n~\n acts as an alias for your home directory, so \n~/python_games\n is the same as \n/home/pi/python_games\n; \n.\n and \n..\n are aliases for the current directory and the parent directory respectively, e.g. if you were in \n/home/pi/python_games\n, \ncd ..\n would take you to \n/home/pi\n.\n\n\nHistory and auto-complete\n\n\nRather than type every command, the terminal allows you to scroll through previous commands that you've run by pressing the \nup\n or \ndown\n keys on your keyboard. If you are writing the name of a file or directory as part of a command then pressing \ntab\n will attempt to auto-complete the name of what you are typing. For example, if you have a file in a directory called \naLongFileName\n then pressing tab after typing \na\n will allow you to choose from all file and directory names beginning with \na\n in the current directory, allowing you to choose \naLongFileName\n.\n\n\nSudo\n\n\nSome commands that make permanent changes to the state of your system require you to have root privileges to run. The command \nsudo\n temporarily gives your account (if you're not already logged in as root) the ability to run these commands, provided your user name is in a list of users ('sudoers'). When you append \nsudo\n to the start of a command and press \nenter\n you will be asked for your password, if that is entered correctly then the command you want to run will be run using root privileges. Be careful though, some commands that require \nsudo\n to run can irreparably damage your system so be careful!\n\n\nFurther information on \nsudo\n and the root user can be found on the \nlinux root page\n.\n\n\nInstalling software through apt-get\n\n\nRather than using the Pi Store to download new software you can use the command \napt-get\n, this is the 'package manager' that is included with any Debian based Linux distributions (including Raspbian). It allows you to install and manage new software packages on your Pi. In order to install a new package you would type \nsudo apt-get install <package-name>\n (where \n<package-name>\n is the package that you want to install). Running \nsudo apt-get update\n updates a list of software packages that are available on your system. If a new version of a package is available then \nsudo apt-get upgrade\n will update any old packages to the new version. Finally, \nsudo apt-get remove <package-name>\n removes or uninstalls a package from your system.\n\n\nMore information about this can be found in the \nlinux usage section on apt\n.\n\n\nOther useful commands\n\n\nThere are a few other commands that you may find useful, these are listed below:\n\n\n\n\ncp\n makes a copy of a file and places it at the specified location (essentially doing a 'copy-paste'), for example - \ncp file_a /home/other_user/\n would copy the file \nfile_a\n from your home directory to that of the user \nother_user\n (assuming you have permission to copy it there). Note that if the target is a folder, the filename will remain the same, but if the target is a filename, it will give the file the new name.\n\n\nmv\n moves a file and places it at the specified location (so where \ncp\n performs a 'copy-paste', \nmv\n performs a 'cut-paste'). The usage is similar to \ncp\n, so \nmv file_a /home/other_user/\n would move the file \nfile_a\n from your home directory to that of the specified user. \nmv\n is also used to rename a file, i.e. move it to a new location, e.g. \nmv hello.txt story.txt\n.\n\n\nrm\n removes the specified file (or directory when used with \n-r\n). \nWarning:\n Files deleted in this way are generally not restorable.\n\n\nmkdir\n: This makes a new directory, e.g. \nmkdir new_dir\n would create the directory \nnew_dir\n in the present working directory.\n\n\ncat\n lists the contents of files, e.g. \ncat some_file\n will display the contents of \nsome_file\n.\n\n\n\n\nOther commands you may find useful can be found in the \ncommands page\n.\n\n\nFinding out about a command\n\n\nTo find out more information about a particular command then you can run the \nman\n followed by the command you want to know more about (e.g. \nman ls\n). The man-page (or manual page) for that command will be displayed, including information about the flags for that program and what effect they have. Some man-pages will give example usage.",
            "title": "Terminal"
        },
        {
            "location": "/Advanced-Things/terminal/index.html#raspbian",
            "text": "Raspbian is the operating system installed on your Solar Pi. This page is here to tell you how to use it.",
            "title": "Raspbian"
        },
        {
            "location": "/Advanced-Things/terminal/index.html#terminal",
            "text": "Info  This was taken from official  Raspberry Pi documentation .   The terminal (or 'command-line') on a computer allows a user a great deal of control over their system (or in this case, Pi!). Users of Windows may already have come across  Command Prompt  or  Powershell  and Mac OS users may be familiar with  Terminal . All of these tools allow a user to directly manipulate their system through the use of commands. These commands can be chained together and/or combined together into complex scripts (see the  linux usage page on scripting ) that can potentially complete tasks more efficiently than much larger traditional software packages.",
            "title": "Terminal"
        },
        {
            "location": "/Advanced-Things/terminal/index.html#opening-a-terminal-window",
            "text": "On the Raspberry Pi (running Raspbian), the default terminal application is  LXTerminal . This is known as a 'terminal emulator', this means that it emulates the old style video terminals (from before graphical user interfaces were developed) in a graphical environment. The application can be found on the Raspberry Pi desktop and when started will look something like this:   You should be able to see the following prompt:  pi@raspberrypi ~ $  This shows your username and the hostname of the Pi. Here the username is  pi  and the hostname is  raspberrypi .  Now, let's try running a command. Type  pwd  (present working directory) followed by the  Enter  key. This should display something like  /home/pi .",
            "title": "Opening a Terminal window"
        },
        {
            "location": "/Advanced-Things/terminal/index.html#navigating-and-browsing-your-pi",
            "text": "One of the key aspects of using a terminal is being able to navigate your file system. Firstly, run the following command:  ls -la . You should see something similar to:   The  ls  command lists the contents of the directory that you are currently in (your present working directory). The  -la  component of the command is what's known as a 'flag'. Flags modify the command that's being run. In this case the  l  displays the contents of the directory in a list, showing data such as their sizes and when they were last edited, and the  a  displays all files, including those beginning with a  . , known as 'dotfiles'. Dotfiles usually act as configuration files for software and as they are written in text, they can be modified by simply editing them.  In order to navigate to other directories the change directory command,  cd , can be used. You can specify the directory that you want to go to by either the 'absolute' or the 'relative' path. So if you wanted to navigate to the  python_games  directory, you could either do  cd /home/pi/python_games  or just  cd python_games  (if you are currently in  /home/pi ). There are some special cases that may be useful:  ~  acts as an alias for your home directory, so  ~/python_games  is the same as  /home/pi/python_games ;  .  and  ..  are aliases for the current directory and the parent directory respectively, e.g. if you were in  /home/pi/python_games ,  cd ..  would take you to  /home/pi .",
            "title": "Navigating and browsing your Pi"
        },
        {
            "location": "/Advanced-Things/terminal/index.html#history-and-auto-complete",
            "text": "Rather than type every command, the terminal allows you to scroll through previous commands that you've run by pressing the  up  or  down  keys on your keyboard. If you are writing the name of a file or directory as part of a command then pressing  tab  will attempt to auto-complete the name of what you are typing. For example, if you have a file in a directory called  aLongFileName  then pressing tab after typing  a  will allow you to choose from all file and directory names beginning with  a  in the current directory, allowing you to choose  aLongFileName .",
            "title": "History and auto-complete"
        },
        {
            "location": "/Advanced-Things/terminal/index.html#sudo",
            "text": "Some commands that make permanent changes to the state of your system require you to have root privileges to run. The command  sudo  temporarily gives your account (if you're not already logged in as root) the ability to run these commands, provided your user name is in a list of users ('sudoers'). When you append  sudo  to the start of a command and press  enter  you will be asked for your password, if that is entered correctly then the command you want to run will be run using root privileges. Be careful though, some commands that require  sudo  to run can irreparably damage your system so be careful!  Further information on  sudo  and the root user can be found on the  linux root page .",
            "title": "Sudo"
        },
        {
            "location": "/Advanced-Things/terminal/index.html#installing-software-through-apt-get",
            "text": "Rather than using the Pi Store to download new software you can use the command  apt-get , this is the 'package manager' that is included with any Debian based Linux distributions (including Raspbian). It allows you to install and manage new software packages on your Pi. In order to install a new package you would type  sudo apt-get install <package-name>  (where  <package-name>  is the package that you want to install). Running  sudo apt-get update  updates a list of software packages that are available on your system. If a new version of a package is available then  sudo apt-get upgrade  will update any old packages to the new version. Finally,  sudo apt-get remove <package-name>  removes or uninstalls a package from your system.  More information about this can be found in the  linux usage section on apt .",
            "title": "Installing software through apt-get"
        },
        {
            "location": "/Advanced-Things/terminal/index.html#other-useful-commands",
            "text": "There are a few other commands that you may find useful, these are listed below:   cp  makes a copy of a file and places it at the specified location (essentially doing a 'copy-paste'), for example -  cp file_a /home/other_user/  would copy the file  file_a  from your home directory to that of the user  other_user  (assuming you have permission to copy it there). Note that if the target is a folder, the filename will remain the same, but if the target is a filename, it will give the file the new name.  mv  moves a file and places it at the specified location (so where  cp  performs a 'copy-paste',  mv  performs a 'cut-paste'). The usage is similar to  cp , so  mv file_a /home/other_user/  would move the file  file_a  from your home directory to that of the specified user.  mv  is also used to rename a file, i.e. move it to a new location, e.g.  mv hello.txt story.txt .  rm  removes the specified file (or directory when used with  -r ).  Warning:  Files deleted in this way are generally not restorable.  mkdir : This makes a new directory, e.g.  mkdir new_dir  would create the directory  new_dir  in the present working directory.  cat  lists the contents of files, e.g.  cat some_file  will display the contents of  some_file .   Other commands you may find useful can be found in the  commands page .",
            "title": "Other useful commands"
        },
        {
            "location": "/Advanced-Things/terminal/index.html#finding-out-about-a-command",
            "text": "To find out more information about a particular command then you can run the  man  followed by the command you want to know more about (e.g.  man ls ). The man-page (or manual page) for that command will be displayed, including information about the flags for that program and what effect they have. Some man-pages will give example usage.",
            "title": "Finding out about a command"
        },
        {
            "location": "/Advanced-Things/commands/index.html",
            "text": "Info\n\n\nNote: This came from official \nRaspberry Pi documentation\n.\n\n\n\n\nHere are some fundamental and common Linux commands with example usage:\n\n\nFilesystem\n\n\nls\n\n\nThe \nls\n command lists the content of the current directory (or one that is specified). It can be used with the \n-l\n flag to display additional information (permissions, owner, group, size, date and timestamp of last edit) about each file and directory in a list format. The \n-a\n flag allows you to view files beginning with \n.\n (i.e. dotfiles).\n\n\ncd\n\n\nUsing \ncd\n changes the current directory to the one specified. You can use relative (i.e. \ncd directoryA\n) or absolute (i.e. \ncd /home/pi/directoryA\n) paths.\n\n\npwd\n\n\nThe \npwd\n command displays the name of the present working directory: on a Raspberry Pi, entering \npwd\n will output something like \n/home/pi\n.\n\n\nmkdir\n\n\nYou can use \nmkdir\n to create a new directory, e.g. \nmkdir newDir\n would create the directory \nnewDir\n in the present working directory.\n\n\nrmdir\n\n\nTo remove empty directories, use \nrmdir\n. So, for example, \nrmdir oldDir\n will remove the directory \noldDir\n only if it is empty.\n\n\nrm\n\n\nThe command \nrm\nremoves the specified file (or recursively from a directory when used with \n-r\n). Be careful with this command: files deleted in this way are mostly gone for good!\n\n\ncp\n\n\nUsing \ncp\n makes a copy of a file and places it at the specified location (this is similar to copying and pasting). For example, \ncp ~/fileA /home/otherUser/\n would copy the file \nfileA\n from your home directory to that of the user \notherUser\n (assuming you have permission to copy it there). This command can either take \nFILE FILE\n (\ncp fileA fileB\n), \nFILE DIR\n (\ncp fileA /directoryB/\n) or \n-r DIR DIR\n (which recursively copies the contents of directories) as arguments.\n\n\nmv\n\n\nThe \nmv\n command moves a file and places it at the specified location (so where \ncp\n performs a 'copy-paste', \nmv\n performs a 'cut-paste'). The usage is similar to \ncp\n. So \nmv ~/fileA /home/otherUser/\n would move the file \nfileA\n from your home directory to that of the user otherUser. This command can either take \nFILE FILE\n (\nmv fileA fileB\n), \nFILE DIR\n (\nmv fileA /directoryB/\n) or \nDIR DIR\n (\nmv /directoryB /directoryC\n) as arguments. This command is also useful as a method to rename files and directories after they've been created.\n\n\ntouch\n\n\nThe command \ntouch\n sets the last modified time-stamp of the specified file(s) or creates it if it does not already exist.\n\n\ncat\n\n\nYou can use \ncat\n to list the contents of file(s), e.g. \ncat thisFile\n will display the contents of \nthisFile\n. Can be used to list the contents of multiple files, i.e. \ncat *.txt\n will list the contents of all \n.txt\n files in the current directory.\n\n\nhead\n\n\nThe \nhead\n command displays the beginning of a file. Can be used with \n-n\n to specify the number of lines to show (by default ten), or with \n-c\n to specify the number of bytes.\n\n\ntail\n\n\nThe opposite of \nhead\n, \ntail\n displays the end of a file. The starting point in the file can be specified either through \n-b\n for 512 byte blocks, \n-c\n for bytes, or \n-n\n for number of lines.\n\n\nchmod\n\n\nYou would normally use \nchmod\n to change the permissions for a file. The \nchmod\n command can use symbols \nu\n (user that owns the file), \ng\n (the files group) ,  and \no\n (other users) and the permissions \nr\n (read), \nw\n (write), and \nx\n (execute). Using \nchmod u+x *filename*\n will add execute permission for the owner of the file.\n\n\nchown\n\n\nThe \nchown\n command changes the user and/or group that owns a file. It normally needs to be run as root using sudo e.g. \nsudo chown pi:root *filename*\n will change the owner to pi and the group to root. \n\n\nssh\n\n\nssh\n denotes the secure shell. Connect to another computer using an encrypted network connection.\n\n\nscp\n\n\nThe \nscp\n command copies a file from one computer to another using \nssh\n.\n\n\nsudo\n\n\nThe \nsudo\n command enables you to run a command as a superuser, or another user. Use \nsudo -s\n for a superuser shell.\n\n\ndd\n\n\nThe \ndd\n command copies a file converting the file as specified. It is often used to copy an entire disk to a single file or back again. So, for example, \ndd if=/dev/sdd of=backup.img\n will create a backup image from an SD card or USB disk drive at /dev/sdd. Make sure to use the correct drive when copying an image to the SD card as it can overwrite the entire disk.\n\n\ndf\n\n\nUse \ndf\n to display the disk space available and used on the mounted filesystems. Use \ndf -h\n to see the output in a human-readable format using M for MBs rather than showing number of bytes. \n\n\nunzip\n\n\nThe \nunzip\n command extracts the files from a compressed zip file. \n\n\ntar\n\n\nUse \ntar\n to store or extract files from a tape archive file. It can also reduce the space required by compressing the file similar to a zip file. \n\n\nTo create a compressed file, use \ntar -cvzf *filename.tar.gz* *directory/*\n\nTo extract the contents of a file, use \ntar -xvzf *filename.tar.gz*\n\n\npipes\n\n\nA pipe allows the output from one command to be used as the input for another command. The pipe symbol is a vertical line \n|\n. For example, to only show the first ten entries of the \nls\n command it can be piped through the head command \nls | head\n\n\ntree\n\n\nUse the \ntree\n command to show a directory and all subdirectories and files indented as a tree structure.\n\n\n&\n\n\nRun a command in the background with \n&\n, freeing up the shell for future commands. \n\n\nwget\n\n\nDownload a file from the web directly to the computer with \nwget\n. So \nwget https://www.raspberrypi.org/documentation/linux/usage/commands.md\n will download this file to your computer as \ncommands.md\n\n\ncurl\n\n\nUse \ncurl\n to download or upload a file to/from a server. By default, it will output the file contents of the file to the screen.\n\n\nman\n\n\nShow the manual page for a file with \nman\n. To find out more, run \nman man\n to view the manual page of the man command. \n\n\nSearch\n\n\ngrep\n\n\nUse \ngrep\n to search inside files for certain search patterns. For example, \ngrep \"search\" *.txt\n will look in all the files in the current directory ending with .txt for the string search.\n\n\nThe \ngrep\n command supports regular expressions which allows special letter combinations to be included in the search.\n\n\nawk\n\n\nawk\n is a programming language useful for searching and manipulating text files.\n\n\nfind\n\n\nThe \nfind\n command searches a directory and subdirectories for files matching certain patterns. \n\n\nwhereis\n\n\nUse \nwhereis\n to find the location of a command. It looks through standard program locations until it finds the requested command.\n\n\nNetworking\n\n\nping\n\n\nThe \nping\n utility is usually used to check if communication can be made with another host. It can be used with default settings by just specifying a hostname (e.g. \nping raspberrypi.org\n) or an IP address (e.g. \nping 8.8.8.8\n). It can specify the number of packets to send with the \n-c\n flag.\n\n\nnmap\n\n\nnmap\n is a network exploration and scanning tool. It can return port and OS information about a host or a range of hosts. Running just \nnmap\n will display the options available as well as example usage.\n\n\nhostname\n\n\nThe \nhostname\n command displays the current hostname of the system. A privileged (super) user can set the hostname to a new one by supplying it as an argument (e.g. \nhostname new-host\n).\n\n\nifconfig\n\n\nUse \nifconfig\n to display the network configuration details for the interfaces on the current system when run without any arguments (i.e. \nifconfig\n). By supplying the command with the name of an interface (e.g. \neth0\n or \nlo\n) you can then alter the configuration: check the manual page for more details.",
            "title": "Linux Commands"
        },
        {
            "location": "/Advanced-Things/commands/index.html#filesystem",
            "text": "",
            "title": "Filesystem"
        },
        {
            "location": "/Advanced-Things/commands/index.html#ls",
            "text": "The  ls  command lists the content of the current directory (or one that is specified). It can be used with the  -l  flag to display additional information (permissions, owner, group, size, date and timestamp of last edit) about each file and directory in a list format. The  -a  flag allows you to view files beginning with  .  (i.e. dotfiles).",
            "title": "ls"
        },
        {
            "location": "/Advanced-Things/commands/index.html#cd",
            "text": "Using  cd  changes the current directory to the one specified. You can use relative (i.e.  cd directoryA ) or absolute (i.e.  cd /home/pi/directoryA ) paths.",
            "title": "cd"
        },
        {
            "location": "/Advanced-Things/commands/index.html#pwd",
            "text": "The  pwd  command displays the name of the present working directory: on a Raspberry Pi, entering  pwd  will output something like  /home/pi .",
            "title": "pwd"
        },
        {
            "location": "/Advanced-Things/commands/index.html#mkdir",
            "text": "You can use  mkdir  to create a new directory, e.g.  mkdir newDir  would create the directory  newDir  in the present working directory.",
            "title": "mkdir"
        },
        {
            "location": "/Advanced-Things/commands/index.html#rmdir",
            "text": "To remove empty directories, use  rmdir . So, for example,  rmdir oldDir  will remove the directory  oldDir  only if it is empty.",
            "title": "rmdir"
        },
        {
            "location": "/Advanced-Things/commands/index.html#rm",
            "text": "The command  rm removes the specified file (or recursively from a directory when used with  -r ). Be careful with this command: files deleted in this way are mostly gone for good!",
            "title": "rm"
        },
        {
            "location": "/Advanced-Things/commands/index.html#cp",
            "text": "Using  cp  makes a copy of a file and places it at the specified location (this is similar to copying and pasting). For example,  cp ~/fileA /home/otherUser/  would copy the file  fileA  from your home directory to that of the user  otherUser  (assuming you have permission to copy it there). This command can either take  FILE FILE  ( cp fileA fileB ),  FILE DIR  ( cp fileA /directoryB/ ) or  -r DIR DIR  (which recursively copies the contents of directories) as arguments.",
            "title": "cp"
        },
        {
            "location": "/Advanced-Things/commands/index.html#mv",
            "text": "The  mv  command moves a file and places it at the specified location (so where  cp  performs a 'copy-paste',  mv  performs a 'cut-paste'). The usage is similar to  cp . So  mv ~/fileA /home/otherUser/  would move the file  fileA  from your home directory to that of the user otherUser. This command can either take  FILE FILE  ( mv fileA fileB ),  FILE DIR  ( mv fileA /directoryB/ ) or  DIR DIR  ( mv /directoryB /directoryC ) as arguments. This command is also useful as a method to rename files and directories after they've been created.",
            "title": "mv"
        },
        {
            "location": "/Advanced-Things/commands/index.html#touch",
            "text": "The command  touch  sets the last modified time-stamp of the specified file(s) or creates it if it does not already exist.",
            "title": "touch"
        },
        {
            "location": "/Advanced-Things/commands/index.html#cat",
            "text": "You can use  cat  to list the contents of file(s), e.g.  cat thisFile  will display the contents of  thisFile . Can be used to list the contents of multiple files, i.e.  cat *.txt  will list the contents of all  .txt  files in the current directory.",
            "title": "cat"
        },
        {
            "location": "/Advanced-Things/commands/index.html#head",
            "text": "The  head  command displays the beginning of a file. Can be used with  -n  to specify the number of lines to show (by default ten), or with  -c  to specify the number of bytes.",
            "title": "head"
        },
        {
            "location": "/Advanced-Things/commands/index.html#tail",
            "text": "The opposite of  head ,  tail  displays the end of a file. The starting point in the file can be specified either through  -b  for 512 byte blocks,  -c  for bytes, or  -n  for number of lines.",
            "title": "tail"
        },
        {
            "location": "/Advanced-Things/commands/index.html#chmod",
            "text": "You would normally use  chmod  to change the permissions for a file. The  chmod  command can use symbols  u  (user that owns the file),  g  (the files group) ,  and  o  (other users) and the permissions  r  (read),  w  (write), and  x  (execute). Using  chmod u+x *filename*  will add execute permission for the owner of the file.",
            "title": "chmod"
        },
        {
            "location": "/Advanced-Things/commands/index.html#chown",
            "text": "The  chown  command changes the user and/or group that owns a file. It normally needs to be run as root using sudo e.g.  sudo chown pi:root *filename*  will change the owner to pi and the group to root.",
            "title": "chown"
        },
        {
            "location": "/Advanced-Things/commands/index.html#ssh",
            "text": "ssh  denotes the secure shell. Connect to another computer using an encrypted network connection.",
            "title": "ssh"
        },
        {
            "location": "/Advanced-Things/commands/index.html#scp",
            "text": "The  scp  command copies a file from one computer to another using  ssh .",
            "title": "scp"
        },
        {
            "location": "/Advanced-Things/commands/index.html#sudo",
            "text": "The  sudo  command enables you to run a command as a superuser, or another user. Use  sudo -s  for a superuser shell.",
            "title": "sudo"
        },
        {
            "location": "/Advanced-Things/commands/index.html#dd",
            "text": "The  dd  command copies a file converting the file as specified. It is often used to copy an entire disk to a single file or back again. So, for example,  dd if=/dev/sdd of=backup.img  will create a backup image from an SD card or USB disk drive at /dev/sdd. Make sure to use the correct drive when copying an image to the SD card as it can overwrite the entire disk.",
            "title": "dd"
        },
        {
            "location": "/Advanced-Things/commands/index.html#df",
            "text": "Use  df  to display the disk space available and used on the mounted filesystems. Use  df -h  to see the output in a human-readable format using M for MBs rather than showing number of bytes.",
            "title": "df"
        },
        {
            "location": "/Advanced-Things/commands/index.html#unzip",
            "text": "The  unzip  command extracts the files from a compressed zip file.",
            "title": "unzip"
        },
        {
            "location": "/Advanced-Things/commands/index.html#tar",
            "text": "Use  tar  to store or extract files from a tape archive file. It can also reduce the space required by compressing the file similar to a zip file.   To create a compressed file, use  tar -cvzf *filename.tar.gz* *directory/* \nTo extract the contents of a file, use  tar -xvzf *filename.tar.gz*",
            "title": "tar"
        },
        {
            "location": "/Advanced-Things/commands/index.html#pipes",
            "text": "A pipe allows the output from one command to be used as the input for another command. The pipe symbol is a vertical line  | . For example, to only show the first ten entries of the  ls  command it can be piped through the head command  ls | head",
            "title": "pipes"
        },
        {
            "location": "/Advanced-Things/commands/index.html#tree",
            "text": "Use the  tree  command to show a directory and all subdirectories and files indented as a tree structure.",
            "title": "tree"
        },
        {
            "location": "/Advanced-Things/commands/index.html#_1",
            "text": "Run a command in the background with  & , freeing up the shell for future commands.",
            "title": "&amp;"
        },
        {
            "location": "/Advanced-Things/commands/index.html#wget",
            "text": "Download a file from the web directly to the computer with  wget . So  wget https://www.raspberrypi.org/documentation/linux/usage/commands.md  will download this file to your computer as  commands.md",
            "title": "wget"
        },
        {
            "location": "/Advanced-Things/commands/index.html#curl",
            "text": "Use  curl  to download or upload a file to/from a server. By default, it will output the file contents of the file to the screen.",
            "title": "curl"
        },
        {
            "location": "/Advanced-Things/commands/index.html#man",
            "text": "Show the manual page for a file with  man . To find out more, run  man man  to view the manual page of the man command.",
            "title": "man"
        },
        {
            "location": "/Advanced-Things/commands/index.html#search",
            "text": "",
            "title": "Search"
        },
        {
            "location": "/Advanced-Things/commands/index.html#grep",
            "text": "Use  grep  to search inside files for certain search patterns. For example,  grep \"search\" *.txt  will look in all the files in the current directory ending with .txt for the string search.  The  grep  command supports regular expressions which allows special letter combinations to be included in the search.",
            "title": "grep"
        },
        {
            "location": "/Advanced-Things/commands/index.html#awk",
            "text": "awk  is a programming language useful for searching and manipulating text files.",
            "title": "awk"
        },
        {
            "location": "/Advanced-Things/commands/index.html#find",
            "text": "The  find  command searches a directory and subdirectories for files matching certain patterns.",
            "title": "find"
        },
        {
            "location": "/Advanced-Things/commands/index.html#whereis",
            "text": "Use  whereis  to find the location of a command. It looks through standard program locations until it finds the requested command.",
            "title": "whereis"
        },
        {
            "location": "/Advanced-Things/commands/index.html#networking",
            "text": "",
            "title": "Networking"
        },
        {
            "location": "/Advanced-Things/commands/index.html#ping",
            "text": "The  ping  utility is usually used to check if communication can be made with another host. It can be used with default settings by just specifying a hostname (e.g.  ping raspberrypi.org ) or an IP address (e.g.  ping 8.8.8.8 ). It can specify the number of packets to send with the  -c  flag.",
            "title": "ping"
        },
        {
            "location": "/Advanced-Things/commands/index.html#nmap",
            "text": "nmap  is a network exploration and scanning tool. It can return port and OS information about a host or a range of hosts. Running just  nmap  will display the options available as well as example usage.",
            "title": "nmap"
        },
        {
            "location": "/Advanced-Things/commands/index.html#hostname",
            "text": "The  hostname  command displays the current hostname of the system. A privileged (super) user can set the hostname to a new one by supplying it as an argument (e.g.  hostname new-host ).",
            "title": "hostname"
        },
        {
            "location": "/Advanced-Things/commands/index.html#ifconfig",
            "text": "Use  ifconfig  to display the network configuration details for the interfaces on the current system when run without any arguments (i.e.  ifconfig ). By supplying the command with the name of an interface (e.g.  eth0  or  lo ) you can then alter the configuration: check the manual page for more details.",
            "title": "ifconfig"
        },
        {
            "location": "/Advanced-Things/python/index.html",
            "text": "Python\n\n\n\n\nInfo\n\n\nNote: This came from the official \nRaspberry Pi documentation\n.\n\n\n\n\nPython is a wonderful and powerful programming language that's easy to use (easy to read \nand\n write) and with Raspberry Pi lets you connect your project to the real world.\n\n\nPython syntax is very clean, with an emphasis on readability and uses standard English keywords. Start by opening IDLE from the desktop.\n\n\nIDLE\n\n\nThe easiest introduction to Python is through IDLE, a Python development environment. Open IDLE from the Desktop or applications menu:\n\n\n\n\nIDLE gives you a REPL (Read-Evaluate-Print-Loop) which is a prompt you can enter Python commands in to. As it's a REPL you even get the output of commands printed to the screen without using \nprint\n.\n\n\nNote two versions of Python are available: Python 2 and Python 3. Python 3 is the newest version and is recommended, however Python 2 is available for legacy applications which do not support Python 3 yet. For the examples on this page you can use Python 2 or 3.\n\n\nYou can use variables if you need to but you can even use it like a calculator. For example:\n\n\n>>>\n \n1\n \n+\n \n2\n\n\n3\n\n\n>>>\n \nname\n \n=\n \n\"Sarah\"\n\n\n>>>\n \n\"Hello \"\n \n+\n \nname\n\n\n'Hello Sarah'\n\n\n\n\n\n\nIDLE also has syntax highlighting built in and some support for autocompletion. You can look back on the history of the commands you've entered in the REPL with \nAlt + P\n (previous) and \nAlt + N\n (next).\n\n\nBasic Python usage\n\n\nHello world in Python:\n\n\nprint\n(\n\"Hello world\"\n)\n\n\n\n\n\n\nSimple as that!\n\n\nIndentation\n\n\nSome languages use curly braces \n{\n and \n}\n to wrap around lines of code which belong together, and leave it to the writer to indent these lines to appear visually nested. However, Python does not use curly braces but instead requires indentation for nesting. For example a \nfor\n loop in Python:\n\n\nfor\n \ni\n \nin\n \nrange\n(\n10\n):\n\n    \nprint\n(\n\"Hello\"\n)\n\n\n\n\n\n\nThe indentation is necessary here. A second line indented would be a part of the loop, and a second line not indented would be outside of the loop. For example:\n\n\nfor\n \ni\n \nin\n \nrange\n(\n2\n):\n\n    \nprint\n(\n\"A\"\n)\n\n    \nprint\n(\n\"B\"\n)\n\n\n\n\n\n\nwould print:\n\n\nA\nB\nA\nB\n\n\n\n\n\nwhereas the following:\n\n\nfor\n \ni\n \nin\n \nrange\n(\n2\n):\n\n    \nprint\n(\n\"A\"\n)\n\n\nprint\n(\n\"B\"\n)\n\n\n\n\n\n\nwould print:\n\n\nA\nA\nB\n\n\n\n\n\nVariables\n\n\nTo save a value to a variable, assign it like so:\n\n\nname\n \n=\n \n\"Bob\"\n\n\nage\n \n=\n \n15\n\n\n\n\n\n\nNote here I did not assign types to these variables, as types are inferred, and can be changed (it's dynamic).\n\n\nage\n \n=\n \n15\n\n\nage\n \n+=\n \n1\n  \n# increment age by 1\n\n\nprint\n(\nage\n)\n\n\n\n\n\n\nThis time I used comments beside the increment command.\n\n\nComments\n\n\nComments are ignored in the program but there for you to leave notes, and are denoted by the hash \n#\n symbol. Multi-line comments use triple quotes like so:\n\n\n\"\"\"\n\n\nThis is a very simple Python program that prints \"Hello\".\n\n\nThat's all it does.\n\n\n\"\"\"\n\n\n\nprint\n(\n\"Hello\"\n)\n\n\n\n\n\n\nLists\n\n\nPython also has lists (called arrays in some languages) which are collections of data of any type:\n\n\nnumbers\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n]\n\n\n\n\n\n\nLists are denoted by the use of square brackets \n[]\n and each item is separated by a comma.\n\n\nIteration\n\n\nSome data types are iterable, which means you can loop over the values they contain. For example a list:\n\n\nnumbers\n \n=\n \n[\n1\n,\n \n2\n,\n \n3\n]\n\n\n\nfor\n \nnumber\n \nin\n \nnumbers\n:\n\n    \nprint\n(\nnumber\n)\n\n\n\n\n\n\nThis takes each item in the list \nnumbers\n and prints out the item:\n\n\n1\n2\n3\n\n\n\n\n\nNote I used the word \nnumber\n to denote each item. This is merely the word I chose for this - it's recommended you choose descriptive words for variables - using plurals for lists, and singular for each item makes sense. It makes it easier to understand when reading.\n\n\nOther data types are iterable, for example the string:\n\n\ndog_name\n \n=\n \n\"BINGO\"\n\n\n\nfor\n \nchar\n \nin\n \ndog_name\n:\n\n    \nprint\n(\nchar\n)\n\n\n\n\n\n\nThis loops over each character and prints them out:\n\n\nB\nI\nN\nG\nO\n\n\n\n\n\nRange\n\n\nThe integer data type is not iterable and trying to iterate over it will produce an error. For example:\n\n\nfor\n \ni\n \nin\n \n3\n:\n\n    \nprint\n(\ni\n)\n\n\n\n\n\n\nwill produce:\n\n\nTypeError\n:\n \n'int'\n \nobject\n \nis\n \nnot\n \niterable\n\n\n\n\n\n\n\n\nHowever you can make an iterable object using the \nrange\n function:\n\n\nfor\n \ni\n \nin\n \nrange\n(\n3\n):\n\n    \nprint\n(\ni\n)\n\n\n\n\n\n\nrange(5)\n contains the numbers \n0\n, \n1\n, \n2\n, \n3\n and \n4\n (five numbers in total). To get the numbers \n1\n to \n5\n use \nrange(1, 6)\n.\n\n\nLength\n\n\nYou can use functions like \nlen\n to find the length of a string or a list:\n\n\nname\n \n=\n \n\"Jamie\"\n\n\nprint\n(\nlen\n(\nname\n))\n  \n# 5\n\n\n\nnames\n \n=\n \n[\n\"Bob\"\n,\n \n\"Jane\"\n,\n \n\"James\"\n,\n \n\"Alice\"\n]\n\n\nprint\n(\nlen\n(\nnames\n))\n  \n# 4\n\n\n\n\n\n\nIf statements\n\n\nYou can use \nif\n statements for control flow:\n\n\nname\n \n=\n \n\"Joe\"\n\n\n\nif\n \nlen\n(\nname\n)\n \n>\n \n3\n:\n\n    \nprint\n(\n\"Nice name,\"\n)\n\n    \nprint\n(\nname\n)\n\n\nelse\n:\n\n    \nprint\n(\n\"That's a short name,\"\n)\n\n    \nprint\n(\nname\n)\n\n\n\n\n\n\nPython files in IDLE\n\n\nTo create a Python file in IDLE, click \nFile > New File\n and you'll be given a blank window. This is an empty file, not a Python prompt. You write a Python file in this window, save it, then run it and you'll see the output in the other window.\n\n\nFor example, in the new window, type:\n\n\nn\n \n=\n \n0\n\n\n\nfor\n \ni\n \nin\n \nrange\n(\n1\n,\n \n101\n):\n\n    \nn\n \n+=\n \ni\n\n\n\nprint\n(\n\"The sum of the numbers 1 to 100 is:\"\n)\n\n\nprint\n(\nn\n)\n\n\n\n\n\n\nThen save this file (\nFile > Save\n or \nCtrl + S\n) and run (\nRun > Run Module\n or hit \nF5\n) and you'll see the output in your original Python window.\n\n\nExecuting Python files from the command line\n\n\nYou can write a Python file in a standard editor like Vim, Nano or LeafPad, and run it as a Python script from the command line. Just navigate to the directory the file is saved (use \ncd\n and \nls\n for guidance) and run with \npython\n, e.g. \npython hello.py\n.",
            "title": "Python"
        },
        {
            "location": "/Advanced-Things/python/index.html#python",
            "text": "Info  Note: This came from the official  Raspberry Pi documentation .   Python is a wonderful and powerful programming language that's easy to use (easy to read  and  write) and with Raspberry Pi lets you connect your project to the real world.  Python syntax is very clean, with an emphasis on readability and uses standard English keywords. Start by opening IDLE from the desktop.",
            "title": "Python"
        },
        {
            "location": "/Advanced-Things/python/index.html#idle",
            "text": "The easiest introduction to Python is through IDLE, a Python development environment. Open IDLE from the Desktop or applications menu:   IDLE gives you a REPL (Read-Evaluate-Print-Loop) which is a prompt you can enter Python commands in to. As it's a REPL you even get the output of commands printed to the screen without using  print .  Note two versions of Python are available: Python 2 and Python 3. Python 3 is the newest version and is recommended, however Python 2 is available for legacy applications which do not support Python 3 yet. For the examples on this page you can use Python 2 or 3.  You can use variables if you need to but you can even use it like a calculator. For example:  >>>   1   +   2  3  >>>   name   =   \"Sarah\"  >>>   \"Hello \"   +   name  'Hello Sarah'   IDLE also has syntax highlighting built in and some support for autocompletion. You can look back on the history of the commands you've entered in the REPL with  Alt + P  (previous) and  Alt + N  (next).",
            "title": "IDLE"
        },
        {
            "location": "/Advanced-Things/python/index.html#basic-python-usage",
            "text": "Hello world in Python:  print ( \"Hello world\" )   Simple as that!",
            "title": "Basic Python usage"
        },
        {
            "location": "/Advanced-Things/python/index.html#indentation",
            "text": "Some languages use curly braces  {  and  }  to wrap around lines of code which belong together, and leave it to the writer to indent these lines to appear visually nested. However, Python does not use curly braces but instead requires indentation for nesting. For example a  for  loop in Python:  for   i   in   range ( 10 ): \n     print ( \"Hello\" )   The indentation is necessary here. A second line indented would be a part of the loop, and a second line not indented would be outside of the loop. For example:  for   i   in   range ( 2 ): \n     print ( \"A\" ) \n     print ( \"B\" )   would print:  A\nB\nA\nB  whereas the following:  for   i   in   range ( 2 ): \n     print ( \"A\" )  print ( \"B\" )   would print:  A\nA\nB",
            "title": "Indentation"
        },
        {
            "location": "/Advanced-Things/python/index.html#variables",
            "text": "To save a value to a variable, assign it like so:  name   =   \"Bob\"  age   =   15   Note here I did not assign types to these variables, as types are inferred, and can be changed (it's dynamic).  age   =   15  age   +=   1    # increment age by 1  print ( age )   This time I used comments beside the increment command.",
            "title": "Variables"
        },
        {
            "location": "/Advanced-Things/python/index.html#comments",
            "text": "Comments are ignored in the program but there for you to leave notes, and are denoted by the hash  #  symbol. Multi-line comments use triple quotes like so:  \"\"\"  This is a very simple Python program that prints \"Hello\".  That's all it does.  \"\"\"  print ( \"Hello\" )",
            "title": "Comments"
        },
        {
            "location": "/Advanced-Things/python/index.html#lists",
            "text": "Python also has lists (called arrays in some languages) which are collections of data of any type:  numbers   =   [ 1 ,   2 ,   3 ]   Lists are denoted by the use of square brackets  []  and each item is separated by a comma.",
            "title": "Lists"
        },
        {
            "location": "/Advanced-Things/python/index.html#iteration",
            "text": "Some data types are iterable, which means you can loop over the values they contain. For example a list:  numbers   =   [ 1 ,   2 ,   3 ]  for   number   in   numbers : \n     print ( number )   This takes each item in the list  numbers  and prints out the item:  1\n2\n3  Note I used the word  number  to denote each item. This is merely the word I chose for this - it's recommended you choose descriptive words for variables - using plurals for lists, and singular for each item makes sense. It makes it easier to understand when reading.  Other data types are iterable, for example the string:  dog_name   =   \"BINGO\"  for   char   in   dog_name : \n     print ( char )   This loops over each character and prints them out:  B\nI\nN\nG\nO",
            "title": "Iteration"
        },
        {
            "location": "/Advanced-Things/python/index.html#range",
            "text": "The integer data type is not iterable and trying to iterate over it will produce an error. For example:  for   i   in   3 : \n     print ( i )   will produce:  TypeError :   'int'   object   is   not   iterable    However you can make an iterable object using the  range  function:  for   i   in   range ( 3 ): \n     print ( i )   range(5)  contains the numbers  0 ,  1 ,  2 ,  3  and  4  (five numbers in total). To get the numbers  1  to  5  use  range(1, 6) .",
            "title": "Range"
        },
        {
            "location": "/Advanced-Things/python/index.html#length",
            "text": "You can use functions like  len  to find the length of a string or a list:  name   =   \"Jamie\"  print ( len ( name ))    # 5  names   =   [ \"Bob\" ,   \"Jane\" ,   \"James\" ,   \"Alice\" ]  print ( len ( names ))    # 4",
            "title": "Length"
        },
        {
            "location": "/Advanced-Things/python/index.html#if-statements",
            "text": "You can use  if  statements for control flow:  name   =   \"Joe\"  if   len ( name )   >   3 : \n     print ( \"Nice name,\" ) \n     print ( name )  else : \n     print ( \"That's a short name,\" ) \n     print ( name )",
            "title": "If statements"
        },
        {
            "location": "/Advanced-Things/python/index.html#python-files-in-idle",
            "text": "To create a Python file in IDLE, click  File > New File  and you'll be given a blank window. This is an empty file, not a Python prompt. You write a Python file in this window, save it, then run it and you'll see the output in the other window.  For example, in the new window, type:  n   =   0  for   i   in   range ( 1 ,   101 ): \n     n   +=   i  print ( \"The sum of the numbers 1 to 100 is:\" )  print ( n )   Then save this file ( File > Save  or  Ctrl + S ) and run ( Run > Run Module  or hit  F5 ) and you'll see the output in your original Python window.",
            "title": "Python files in IDLE"
        },
        {
            "location": "/Advanced-Things/python/index.html#executing-python-files-from-the-command-line",
            "text": "You can write a Python file in a standard editor like Vim, Nano or LeafPad, and run it as a Python script from the command line. Just navigate to the directory the file is saved (use  cd  and  ls  for guidance) and run with  python , e.g.  python hello.py .",
            "title": "Executing Python files from the command line"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html",
            "text": "Programming Glossary\n\n\n\n\nInfo\n\n\nNote: This came from \nProgramming for Beginners\n.\n\n\n\n\nalgorithm\n\n\n\n\n(noun) a step-by-step procedure to achieve a specific goal. Can be implemented with code.\n\n\n\n\nExample: I used the quicksort algorithm to sort the array alphabetically.\n\n\nargument\n\n\n\n\n(noun) a value that is passed into a function when it is called. Arguments are said to be \u201cpassed\u201d into a function, and functions are said to \u201ctake\u201d arguments. Also known as a \u201cparameter.\u201d\n\n\n\n\nExample: That function takes two arguments.\n\n\narray\n\n\n\n\n(noun) a type of value that contains a sequence of other values.\n\n\n\n\nExample: I put all our names into an array of strings.\n\n\nassignment\n\n\n\n\n(noun) the act of putting a value into a variable.\n\n\n\n\nExample: I assigned the number \n22\n to the \nage\n variable.\n\n\nbrackets\n\n\n\n\n(noun) characters often used to surround text. The different types of brackets are:\nParenthesis/parens/round brackets: \n( )\n\nCurly brackets/braces: \n{ }\n\nAngle brackets: \n< >\n\nSquare brackets: \n[ ]\n\nThe bracket at the beginning is called the \u201copening\u201d or the \u201cleft\u201d bracket. The bracket at the end is called the \u201cclosing\u201d or \u201cright\u201d bracket.\n\n\n\n\nExample: Your code won\u2019t compile because you forgot a closing bracket.\n\n\nbug\n\n\n\n\n(noun) a mistake in a program.\n\n\n\n\nExample: There must be a bug because the output is wrong.\n\n\ncall\n\n\n\n\n(verb) to run the code in a function. Also referred to as \u201crunning,\u201d \u201cexecuting,\u201d or \u201cinvoking\u201d a function. For the noun, see function call.\n\n\n\n\nExample: I called the \nrand\n function and it returned \n42\n.\n\n\nclass\n\n\n\n\n(noun) a type that can be defined by the programmer. Classes are defined in order to create objects of that class. See object\n\n\n\n\nExample: I made a \nPerson\n class that holds a person\u2019s name and age.\n\n\ncomment\n\n\n\n\n(noun) arbitrary text written around code, but which is never run, and is generally ignored by the computer. Used to leave notes and documentation for people who read the code later. Also used to stop code from running (see comment out).\n\n\n\n\nExample: I wrote comments in my code so I could understand it later.\n\n\ncomment out\n\n\n\n\n(verb) to turn code into a comment so that it does not get run.\n\n\n\n\nExample: I commented out this line of code, and it doesn\u2019t crash any more.\n\n\ncompiler\n\n\n\n\n(noun) a program that converts code into an executable, and checks that the syntax is correct. Sometimes compilers convert code into other code.\n\n\n\n\nExample: The compiler is giving me an error, so I must have incorrect syntax somewhere.\n\n\nconstant\n\n\n\n\n(noun) a variable that never changes its value.\n\n\n\n\nExample: The \nPI\n constant has the value \n3.14\n.\n\n\ncrash\n\n\n\n\n(verb) to cause a running program to stop due to an error.\n\n\n\n\nExample: I tried to divide a number by zero, which made the program crash.\n\n\ndata structure\n\n\n\n\n(noun) a value that contains other values.\n\n\n\n\nExample: Arrays are one kind of data structure.\n\n\ndebug\n\n\n\n\n(verb) to investigate and fix bugs.\n\n\n\n\nExample: I spent all day debugging a complicated error.\n\n\ndeclaration\n\n\n\n\n(noun) code that declares that something exists \u2013 usually a variable, function or a class. A declaration might not fully define the thing it is declaring. E.g. a constant may be declared to exist, without actually defining what it\u2019s value is. Not all programming languages allow for declarations.\n\n\n\n\nExample: My code won\u2019t compile because I wrote a function declaration, but I forgot to write the actual function.\n\n\ndefinition\n\n\n\n\n(noun) code that fully implements something \u2013 usually a variable, function or a class. The code that implements a class is called the \u201cclass definition.\u201d The code that implements a function is called the \u201cfunction definition.\u201d\n\n\n\n\nExample: The function wasn\u2019t doing what I expected, so I had a look at its definition.\n\n\ndouble\n\n\n\n\n(noun) a float that can represent a wider range of numbers than a normal float. Short for \u201cdouble-precision floating-point number.\u201d See float.\n\n\n\n\nExample: The number was so tiny I had to use a \ndouble\n instead of a \nfloat\n.\n\n\nexecute\n\n\n\n\n(verb) Synonym for run.\n\n\n\n\nExample: I can\u2019t execute my program because it won\u2019t compile.\n\n\nexecutable\n\n\n\n\n(noun) a program, usually a single file, ready to be run.\n\n\n\n\nExample: Give me the executable so I can try out your program.\n\n\nfloat\n\n\n\n\n(noun) a type of value that represents numbers with fractional parts. Short for \u201cfloating-point number\u201d.\n\n\n\n\nExample: The value \n3.14\n is a float.\n\n\nfunction\n\n\n\n\n(noun) a piece of code that is not run until it is called. Functions take zero or more arguments. When a function finishes running, it returns a return value back to the code that called it.\n\n\n\n\nExample: I wrote a function that takes an array of numbers as an argument, and returns the average.\n\n\nfunction call\n\n\n\n\n(noun) code for calling a function. Function calls specify which function to call, and all of the arguments that the function requires. The result of a function call is a return value. Not all functions have a return value.\n\n\n\n\nExample: The function call \nadd(1,2,3)\n returns the value \n6\n.\n\n\nimplement\n\n\n\n\n(verb) to write all the code to complete something \u2013 usually a function or a class.\n\n\n\n\nExample: I finished implementing those functions.\n\n\ninstance\n\n\n\n\n(noun) Synonym for object.\n\n\n\n\nExample: I created an instance of the \nPerson\n class.\n\n\ninstance variable\n\n\n\n\n(noun) a variable that is attached to an object. Also known as a \u201cmember variable\u201d or just a \u201cmember.\u201d\n\n\n\n\nExample: On the tom object, I assigned the value \n\"Tom Dalling\"\n to the \nname\n instance variable.\n\n\ninstantiate\n\n\n\n\n(verb) to create an object from a class.\n\n\n\n\nExample: I instantiated an object of the \nPerson\n class.\n\n\ninteger\n\n\n\n\n(noun) a type of value that represents whole numbers. For fractional numbers, see float.\n\n\n\n\nExample: \n42\n is an integer value.\n\n\ninterpreter\n\n\n\n\n(noun) a program that runs code. For languages that are not compiled, the source code is run directly by an interpreter. Compiled programming languages do not usually have an interpreter.\n\n\n\n\nExample: I installed the Ruby interpreter so I can run my Ruby code.\n\n\ninvoke\n\n\n\n\n(verb) Synonym for call.\n\n\n\n\nExample: I invoked the function with the wrong arguments, and it crashed.\n\n\niterate\n\n\n\n\n(verb) Synonym for loop.\n\n\n\n\nExample: I iterated over all the values in the array.\n\n\nloop\n\n\n\n\n(noun) a piece of code that runs itself repeatedly. Commonly used to run a piece code for every value in an array. Also known as \u201citeration\u201d.\n\n\n\n\nExample: The code loops until the user types in \n\"quit\"\n.\n\n\nmember function\n\n\n\n\n(noun) Synonym for method.\n\n\n\n\nExample: This class has three member functions.\n\n\nmember variable\n\n\n\n\n(noun) Synonym for instance variable.\n\n\n\n\nExample: This class has two member variables.\n\n\nmethod\n\n\n\n\n(noun) a function that is attached to an object. Methods belong to, and are defined in, a class. Also known as a \u201cmember function.\u201d\n\n\n\n\nExample: The length method returns the number of characters in a string object.\n\n\nnested\n\n\n\n\n(adjective) contained within something like itself. E.g. a nested array is an array that is inside another array, and a nested class is a class defined inside the definition of another class.\n\n\n\n\nExample: I used a nested loop to loop over a grid \u2013 the outer loop for the x coordinate, and the inner loop for the y coordinate.\n\n\nobject\n\n\n\n\n(noun) a value created from a class. E.g. If you want to represent your family in code then you might make a class called FamilyMember, and create several objects from that class \u2013 one object for each person in your family.\n\n\nObjects usually contain other values inside instance variables, and have methods attached to them. E.g. each FamilyMember object might have a name instance variable. Objects combine the concept of variables and functions into a single value. Also known as an \u201cinstance.\u201d\n\n\n\n\nExample: I make the enemy move by changing the position instance variable of the enemy object.\n\n\nobject-oriented\n\n\n\n\n(adjective) designed using objects.\n\n\n\n\nExample: Ruby is an object-oriented programming language because all values are objects in Ruby.\n\n\nparameter\n\n\n\n\n(noun) Synonym for argument.\n\n\n\n\nExample: That function takes two parameters.\n\n\nparenthesis\n\n\n\n\n(noun) A type of bracket.\n\n\n\n\nExample: Lisp-like programming languages use a lot of parenthesis in their syntax.\n\n\nprocedure\n\n\n\n\n(noun) Synonym for function.\n\n\n\n\nExample: That procedure takes two arguments.\n\n\nprogram\n\n\n\n\n(noun) a full piece of software that is ready to be run. Usually an executable.\n\n\n\n\nExample: I wrote a program that keeps track of my todo list.\n\n\nread\n\n\n\n\n(verb) to retrieve input data values from an external source \u2013 usually from a file. Can refer to retrieving data over a network, such as the internet. The opposite of writing.\n\n\n\n\nExample: I read the contents of file into a string.\n\n\nreturn\n\n\n\n\n(verb) to immediately stop a called function from running, possibly providing a return value. A function automatically returns once all of its code has been run. However, the code in the function definition can force the function to return at any point.\n\n\n\n\nExample: If the array is empty, the function returns early without running the rest of its code.\n\n\nreturn value\n\n\n\n\n(noun) the value that results from a completed function call.\n\n\n\n\nExample: The return value of the rand function is a random float between \n0.0\n and \n1.0\n.\n\n\nrun\n\n\n\n\n(verb) to perform the instructions written in code or an executable. Code is a set of instructions, and \u201crunning\u201d code is when the computer actually performs those instructions. To \u201crun\u201d a function means to call that function (see call).\n\n\n\n\nExample: I wrote a new feature, and ran the code to check that it works.\n\n\nstring\n\n\n\n\n(noun) a type of value that represents text. The word \u201cstring\u201d derives from the phrase \u201cstring of characters.\u201d E.g. The string \n\"cat\"\n is a string (a.k.a. sequence) of the characters \n\u2018c\u2019\n, \n\u2018a\u2019\n, and \n\u2018t\u2019\n.\n\n\n\n\nExample: I represented my name as a string in the code.\n\n\nsyntax\n\n\n\n\n(noun) the grammatical rules of a programming language. Every programming language has different syntax. Syntax determines whether code is written correctly or incorrectly, and is enforced by the compiler or interpreter. Code will not compile or run unless the syntax is correct.\n\n\n\n\nExample: I forgot to write the brackets, so the compiler gave me a syntax error.\n\n\ntype\n\n\n\n\n(noun) the kind or category of a value. Every value has a type.\n\n\nThe value \n5\n is of the integer type.\n\n\nThe value \n5.2\n is of the float type.\n\n\nThe value \n\"cat\"\n is of the string type.\n\n\nSimple types, like integers, are usually provided by the programming language. The programmer can define more complicated types using classes. The type of an object determines what methods and instance variables are attached to that object.\n\n\n\n\nExample: I got a crash because the variable contained the wrong type of value \u2013 I thought it would be an integer, but it was actually a string.\n\n\nvalue\n\n\n\n\n(noun) a piece of data that can be contained inside a variable. Every value has a type. Values represent information, in a way that code can work upon.\n\n\nCode can: send and receive values over the internet save values into files convert values into different values etc.\n\n\n\n\nExample: My program asks a user for the year they were born, then uses that value to calculate their age.\n\n\nvariable\n\n\n\n\n(noun) a named container for a single value. Variables are not values themselves, they are merely containers for values. Putting a value into a variable is referred to as assignment. Variables are named after the fact that their value can vary \u2013 a different value can be assigned to a variable at any time.\n\n\n\n\nExample: I assigned the string value \n\"Tom\"\n to the \nname\n variable.\n\n\nwrite\n\n\n\n\n(verb) to send output data values to an external destination \u2013 usually to a file. Can refer to sending data over a network, such as the internet. The opposite of reading.\n\n\n\n\nExample: The program writes all its data to a file before it quits, so it can read the data back again next time it is run.",
            "title": "Programming Glossary"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#programming-glossary",
            "text": "Info  Note: This came from  Programming for Beginners .",
            "title": "Programming Glossary"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#algorithm",
            "text": "(noun) a step-by-step procedure to achieve a specific goal. Can be implemented with code.   Example: I used the quicksort algorithm to sort the array alphabetically.",
            "title": "algorithm"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#argument",
            "text": "(noun) a value that is passed into a function when it is called. Arguments are said to be \u201cpassed\u201d into a function, and functions are said to \u201ctake\u201d arguments. Also known as a \u201cparameter.\u201d   Example: That function takes two arguments.",
            "title": "argument"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#array",
            "text": "(noun) a type of value that contains a sequence of other values.   Example: I put all our names into an array of strings.",
            "title": "array"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#assignment",
            "text": "(noun) the act of putting a value into a variable.   Example: I assigned the number  22  to the  age  variable.",
            "title": "assignment"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#brackets",
            "text": "(noun) characters often used to surround text. The different types of brackets are:\nParenthesis/parens/round brackets:  ( ) \nCurly brackets/braces:  { } \nAngle brackets:  < > \nSquare brackets:  [ ] \nThe bracket at the beginning is called the \u201copening\u201d or the \u201cleft\u201d bracket. The bracket at the end is called the \u201cclosing\u201d or \u201cright\u201d bracket.   Example: Your code won\u2019t compile because you forgot a closing bracket.",
            "title": "brackets"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#bug",
            "text": "(noun) a mistake in a program.   Example: There must be a bug because the output is wrong.",
            "title": "bug"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#call",
            "text": "(verb) to run the code in a function. Also referred to as \u201crunning,\u201d \u201cexecuting,\u201d or \u201cinvoking\u201d a function. For the noun, see function call.   Example: I called the  rand  function and it returned  42 .",
            "title": "call"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#class",
            "text": "(noun) a type that can be defined by the programmer. Classes are defined in order to create objects of that class. See object   Example: I made a  Person  class that holds a person\u2019s name and age.",
            "title": "class"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#comment",
            "text": "(noun) arbitrary text written around code, but which is never run, and is generally ignored by the computer. Used to leave notes and documentation for people who read the code later. Also used to stop code from running (see comment out).   Example: I wrote comments in my code so I could understand it later.",
            "title": "comment"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#comment-out",
            "text": "(verb) to turn code into a comment so that it does not get run.   Example: I commented out this line of code, and it doesn\u2019t crash any more.",
            "title": "comment out"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#compiler",
            "text": "(noun) a program that converts code into an executable, and checks that the syntax is correct. Sometimes compilers convert code into other code.   Example: The compiler is giving me an error, so I must have incorrect syntax somewhere.",
            "title": "compiler"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#constant",
            "text": "(noun) a variable that never changes its value.   Example: The  PI  constant has the value  3.14 .",
            "title": "constant"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#crash",
            "text": "(verb) to cause a running program to stop due to an error.   Example: I tried to divide a number by zero, which made the program crash.",
            "title": "crash"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#data-structure",
            "text": "(noun) a value that contains other values.   Example: Arrays are one kind of data structure.",
            "title": "data structure"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#debug",
            "text": "(verb) to investigate and fix bugs.   Example: I spent all day debugging a complicated error.",
            "title": "debug"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#declaration",
            "text": "(noun) code that declares that something exists \u2013 usually a variable, function or a class. A declaration might not fully define the thing it is declaring. E.g. a constant may be declared to exist, without actually defining what it\u2019s value is. Not all programming languages allow for declarations.   Example: My code won\u2019t compile because I wrote a function declaration, but I forgot to write the actual function.",
            "title": "declaration"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#definition",
            "text": "(noun) code that fully implements something \u2013 usually a variable, function or a class. The code that implements a class is called the \u201cclass definition.\u201d The code that implements a function is called the \u201cfunction definition.\u201d   Example: The function wasn\u2019t doing what I expected, so I had a look at its definition.",
            "title": "definition"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#double",
            "text": "(noun) a float that can represent a wider range of numbers than a normal float. Short for \u201cdouble-precision floating-point number.\u201d See float.   Example: The number was so tiny I had to use a  double  instead of a  float .",
            "title": "double"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#execute",
            "text": "(verb) Synonym for run.   Example: I can\u2019t execute my program because it won\u2019t compile.",
            "title": "execute"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#executable",
            "text": "(noun) a program, usually a single file, ready to be run.   Example: Give me the executable so I can try out your program.",
            "title": "executable"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#float",
            "text": "(noun) a type of value that represents numbers with fractional parts. Short for \u201cfloating-point number\u201d.   Example: The value  3.14  is a float.",
            "title": "float"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#function",
            "text": "(noun) a piece of code that is not run until it is called. Functions take zero or more arguments. When a function finishes running, it returns a return value back to the code that called it.   Example: I wrote a function that takes an array of numbers as an argument, and returns the average.",
            "title": "function"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#function-call",
            "text": "(noun) code for calling a function. Function calls specify which function to call, and all of the arguments that the function requires. The result of a function call is a return value. Not all functions have a return value.   Example: The function call  add(1,2,3)  returns the value  6 .",
            "title": "function call"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#implement",
            "text": "(verb) to write all the code to complete something \u2013 usually a function or a class.   Example: I finished implementing those functions.",
            "title": "implement"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#instance",
            "text": "(noun) Synonym for object.   Example: I created an instance of the  Person  class.",
            "title": "instance"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#instance-variable",
            "text": "(noun) a variable that is attached to an object. Also known as a \u201cmember variable\u201d or just a \u201cmember.\u201d   Example: On the tom object, I assigned the value  \"Tom Dalling\"  to the  name  instance variable.",
            "title": "instance variable"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#instantiate",
            "text": "(verb) to create an object from a class.   Example: I instantiated an object of the  Person  class.",
            "title": "instantiate"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#integer",
            "text": "(noun) a type of value that represents whole numbers. For fractional numbers, see float.   Example:  42  is an integer value.",
            "title": "integer"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#interpreter",
            "text": "(noun) a program that runs code. For languages that are not compiled, the source code is run directly by an interpreter. Compiled programming languages do not usually have an interpreter.   Example: I installed the Ruby interpreter so I can run my Ruby code.",
            "title": "interpreter"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#invoke",
            "text": "(verb) Synonym for call.   Example: I invoked the function with the wrong arguments, and it crashed.",
            "title": "invoke"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#iterate",
            "text": "(verb) Synonym for loop.   Example: I iterated over all the values in the array.",
            "title": "iterate"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#loop",
            "text": "(noun) a piece of code that runs itself repeatedly. Commonly used to run a piece code for every value in an array. Also known as \u201citeration\u201d.   Example: The code loops until the user types in  \"quit\" .",
            "title": "loop"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#member-function",
            "text": "(noun) Synonym for method.   Example: This class has three member functions.",
            "title": "member function"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#member-variable",
            "text": "(noun) Synonym for instance variable.   Example: This class has two member variables.",
            "title": "member variable"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#method",
            "text": "(noun) a function that is attached to an object. Methods belong to, and are defined in, a class. Also known as a \u201cmember function.\u201d   Example: The length method returns the number of characters in a string object.",
            "title": "method"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#nested",
            "text": "(adjective) contained within something like itself. E.g. a nested array is an array that is inside another array, and a nested class is a class defined inside the definition of another class.   Example: I used a nested loop to loop over a grid \u2013 the outer loop for the x coordinate, and the inner loop for the y coordinate.",
            "title": "nested"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#object",
            "text": "(noun) a value created from a class. E.g. If you want to represent your family in code then you might make a class called FamilyMember, and create several objects from that class \u2013 one object for each person in your family.  Objects usually contain other values inside instance variables, and have methods attached to them. E.g. each FamilyMember object might have a name instance variable. Objects combine the concept of variables and functions into a single value. Also known as an \u201cinstance.\u201d   Example: I make the enemy move by changing the position instance variable of the enemy object.",
            "title": "object"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#object-oriented",
            "text": "(adjective) designed using objects.   Example: Ruby is an object-oriented programming language because all values are objects in Ruby.",
            "title": "object-oriented"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#parameter",
            "text": "(noun) Synonym for argument.   Example: That function takes two parameters.",
            "title": "parameter"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#parenthesis",
            "text": "(noun) A type of bracket.   Example: Lisp-like programming languages use a lot of parenthesis in their syntax.",
            "title": "parenthesis"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#procedure",
            "text": "(noun) Synonym for function.   Example: That procedure takes two arguments.",
            "title": "procedure"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#program",
            "text": "(noun) a full piece of software that is ready to be run. Usually an executable.   Example: I wrote a program that keeps track of my todo list.",
            "title": "program"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#read",
            "text": "(verb) to retrieve input data values from an external source \u2013 usually from a file. Can refer to retrieving data over a network, such as the internet. The opposite of writing.   Example: I read the contents of file into a string.",
            "title": "read"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#return",
            "text": "(verb) to immediately stop a called function from running, possibly providing a return value. A function automatically returns once all of its code has been run. However, the code in the function definition can force the function to return at any point.   Example: If the array is empty, the function returns early without running the rest of its code.",
            "title": "return"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#return-value",
            "text": "(noun) the value that results from a completed function call.   Example: The return value of the rand function is a random float between  0.0  and  1.0 .",
            "title": "return value"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#run",
            "text": "(verb) to perform the instructions written in code or an executable. Code is a set of instructions, and \u201crunning\u201d code is when the computer actually performs those instructions. To \u201crun\u201d a function means to call that function (see call).   Example: I wrote a new feature, and ran the code to check that it works.",
            "title": "run"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#string",
            "text": "(noun) a type of value that represents text. The word \u201cstring\u201d derives from the phrase \u201cstring of characters.\u201d E.g. The string  \"cat\"  is a string (a.k.a. sequence) of the characters  \u2018c\u2019 ,  \u2018a\u2019 , and  \u2018t\u2019 .   Example: I represented my name as a string in the code.",
            "title": "string"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#syntax",
            "text": "(noun) the grammatical rules of a programming language. Every programming language has different syntax. Syntax determines whether code is written correctly or incorrectly, and is enforced by the compiler or interpreter. Code will not compile or run unless the syntax is correct.   Example: I forgot to write the brackets, so the compiler gave me a syntax error.",
            "title": "syntax"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#type",
            "text": "(noun) the kind or category of a value. Every value has a type.  The value  5  is of the integer type.  The value  5.2  is of the float type.  The value  \"cat\"  is of the string type.  Simple types, like integers, are usually provided by the programming language. The programmer can define more complicated types using classes. The type of an object determines what methods and instance variables are attached to that object.   Example: I got a crash because the variable contained the wrong type of value \u2013 I thought it would be an integer, but it was actually a string.",
            "title": "type"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#value",
            "text": "(noun) a piece of data that can be contained inside a variable. Every value has a type. Values represent information, in a way that code can work upon.  Code can: send and receive values over the internet save values into files convert values into different values etc.   Example: My program asks a user for the year they were born, then uses that value to calculate their age.",
            "title": "value"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#variable",
            "text": "(noun) a named container for a single value. Variables are not values themselves, they are merely containers for values. Putting a value into a variable is referred to as assignment. Variables are named after the fact that their value can vary \u2013 a different value can be assigned to a variable at any time.   Example: I assigned the string value  \"Tom\"  to the  name  variable.",
            "title": "variable"
        },
        {
            "location": "/Advanced-Things/programming-glossary/index.html#write",
            "text": "(verb) to send output data values to an external destination \u2013 usually to a file. Can refer to sending data over a network, such as the internet. The opposite of reading.   Example: The program writes all its data to a file before it quits, so it can read the data back again next time it is run.",
            "title": "write"
        },
        {
            "location": "/about/index.html",
            "text": "About\n\n\nThe Solar Pi project aims to bring flexible and affordable Raspberry Pi based computers to developing countries to provide people with digital skills.\n\n\nThe flexibility of the Solar Pi is what sets it apart from its competitors - it's not limited to only computing and coding; the fact that it can load and host offline web pages allows it to be used to teach almost anything. Its modular design also ensures that parts can be easily replaced if they fail, and allows individual units to be easily configured to the recipient's specifications.\n\n\nEnjoy! :)",
            "title": "About"
        },
        {
            "location": "/about/index.html#about",
            "text": "The Solar Pi project aims to bring flexible and affordable Raspberry Pi based computers to developing countries to provide people with digital skills.  The flexibility of the Solar Pi is what sets it apart from its competitors - it's not limited to only computing and coding; the fact that it can load and host offline web pages allows it to be used to teach almost anything. Its modular design also ensures that parts can be easily replaced if they fail, and allows individual units to be easily configured to the recipient's specifications.  Enjoy! :)",
            "title": "About"
        }
    ]
}